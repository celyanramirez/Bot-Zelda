from discord.ext import commands
import discord
import asyncio
import random
import time

class Botdisc:

    def __init__(self):
        self.check = False
        self.garde = False
        self.def_open = False
        self.participants = []
        self.points = []
        
class Quizz:
    
    def __init__(self):
        self.__questions = ["Quel est le nom du 3e jeu Zelda ? üü¢",
                            "Quel est le nom du personnage principal ? üü¢",
                            "Dans Twilight Princess, quel est le nom du 6√®me donjon ? üü†",
                            "Dans quelle branche de la Timeline se trouve Oracle of Ages ? üü¢",
                            "Dans Wind Waker, comment s'appelle la jeune piaf de l'√Æle du Dragon ? üü¢",
                            "En quelle ann√©e est sortie The Adventure of Link ? üü†",
                            "En quelle ann√©e est sortie Oracle of Seasons ? üü†",
                            "En quel mois et ann√©e est sortie TriForce Heroes ? üî¥",
                            "Quel est le bon ordre (chronologiquement) des diff√©rents jeux ? üî¥",
                            "Dans Majora's Mask 3D, o√π est install√© le banquier ? üü†",
                            "Dans Majora's Mask 3D, combien il y a-t-il de flacons ? üî¥",
                            "Dans Wind Waker HD, combien il y a-t-il d'√Æles ? üî¥",
                            "Dans Minish Cap, o√π obtient-on le bouclier miroir ? üî¥",
                            "Dans Breath of the Wild, quel est le nom de notre premier sanctuaire ? üî¥",
                            "Dans Twilight Princess, comment s'appelle le Dieu qui vit pr√®s de Toal ? üü¢",
                            "Qui a compos√© les musiques du jeu Link's Awakening ? üî¥",
                            "Dans Link's Awakening, parmis ces 4 emplacements de t√©l√©porteur 1 n'existe pas, lequel c'est ? üî¥"]

        self.__reponses = {0 : ["1Ô∏è‚É£ OOT", "2Ô∏è‚É£ ALTTP", "3Ô∏è‚É£ ALBW", "4Ô∏è‚É£ LA"],
                           1 : ["1Ô∏è‚É£ Link", "2Ô∏è‚É£ Zelda", "3Ô∏è‚É£ Tingle", "4Ô∏è‚É£ Linkle"],
                           2 : ["1Ô∏è‚É£ Tour du Jugement", "2Ô∏è‚É£ Ch√¢teau des Pics Blancs", "3Ô∏è‚É£ C√©lestia", "4Ô∏è‚É£ Ruines des Pics Blancs"],
                           3 : ["1Ô∏è‚É£ Timeline de la d√©faite", "2Ô∏è‚É£ Timeline de l'enfance", "3Ô∏è‚É£ Timeline de Link Adulte", "4Ô∏è‚É£ D√©but de la l√©gende"],
                           4 : ["1Ô∏è‚É£ Romanie","2Ô∏è‚É£ Melodie", "3Ô∏è‚É£ Elwing", "4Ô∏è‚É£ Medolie"],
                           5 : ["1Ô∏è‚É£ 1986", "2Ô∏è‚É£ 1987", "3Ô∏è‚É£ 1985", "4Ô∏è‚É£ 1988"],
                           6 : ["1Ô∏è‚É£ 1999", "2Ô∏è‚É£ 1989", "3Ô∏è‚É£ 2003", "4Ô∏è‚É£ 2001"],
                           7 : ["1Ô∏è‚É£ Ao√ªt 2015", "2Ô∏è‚É£ Janvier 2016", "3Ô∏è‚É£ Octobre 2015", "4Ô∏è‚É£ Novembre 2015"],
                           8 : ["1Ô∏è‚É£ SS-MC-FS-OOT", "2Ô∏è‚É£ SS-FS-MC-OOT", "3Ô∏è‚É£ SS-OOT-MC-FS", "4Ô∏è‚É£ SS-OOT-FS-MC"],
                           9 : ["1Ô∏è‚É£ A l'Ouest de Bourg-Clocher", "2Ô∏è‚É£ A l'Est de Bourg-Clocher", "3Ô∏è‚É£ Derri√®re la tour de l'Horloge", "4Ô∏è‚É£ Devant la tour de l'Horloge"],
                           10 : ["1Ô∏è‚É£ 7", "2Ô∏è‚É£ 6", "3Ô∏è‚É£ 8", "4Ô∏è‚É£ 5"],
                           11 : ["1Ô∏è‚É£ 45", "2Ô∏è‚É£ 49", "3Ô∏è‚É£ 50", "4Ô∏è‚É£ 38"],
                           12 : ["1Ô∏è‚É£ Par un Zora", "2Ô∏è‚É£ Dans un donjon", "3Ô∏è‚É£ Par un Goron", "4Ô∏è‚É£ Par un marchand"],
                           13 : ["1Ô∏è‚É£ Gu'Achitoh", "2Ô∏è‚É£ Moa'Kishito", "3Ô∏è‚É£ Ma'Ohnu", "4Ô∏è‚É£ Shora'Ha"],
                           14 : ["1Ô∏è‚É£ Lanelle", "2Ô∏è‚É£ Ordin", "3Ô∏è‚É£ Latouane", "4Ô∏è‚É£ Firone"],
                           15 : ["1Ô∏è‚É£ Satoru Iwata", "2Ô∏è‚É£ Minako Hamano", "3Ô∏è‚É£ Kazumi Totaka", "4Ô∏è‚É£ Shigefumi Hino"],
                           16 : ["1Ô∏è‚É£ Au Nord du village des Animaux", "2Ô∏è‚É£ A l'Est du village des Mouettes", "3Ô∏è‚É£ Au Sud de l'Ab√Æme du poisson", "4Ô∏è‚É£ Dans le plateau Tartare Ouest"]}

        self.__bonneReponse = ["2Ô∏è‚É£ ALTTP",
                               "1Ô∏è‚É£ Link",
                               "4Ô∏è‚É£ Ruines des Pics Blancs",
                               "1Ô∏è‚É£ Timeline de la d√©faite",
                               "4Ô∏è‚É£ Medolie",
                               "2Ô∏è‚É£ 1987",
                               "4Ô∏è‚É£ 2001",
                               "3Ô∏è‚É£ Octobre 2015",
                               "1Ô∏è‚É£ SS-MC-FS-OOT",
                               "3Ô∏è‚É£ Derri√®re la tour de l'Horloge",
                               "1Ô∏è‚É£ 7",
                               "2Ô∏è‚É£ 49",
                               "3Ô∏è‚É£ Par un Goron",
                               "3Ô∏è‚É£ Ma'Ohnu",
                               "3Ô∏è‚É£ Latouane",
                               "2Ô∏è‚É£ Minako Hamano",
                               "1Ô∏è‚É£ Au Nord du village des Animaux"]

        self.__tab = ['1Ô∏è‚É£' , '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '‚ùå']
        self.__lancer = False
        self.place = 0

    def getQuestions(self):
        return self.__questions
 
    def getReponses(self):
        return self.__reponses

    def getLancer(self):
        return self.__lancer

    def setLancer(self, boolean):
        assert boolean in [True,False]
        self.__lancer = boolean
        
    def getBonneReponse(self):
        return self.__bonneReponse

    def getTab(self):
        return self.__tab

    def getPlace(self):
        return self.place

    def setPlace(self,x):
        self.place = x


class Joueur:

    def __init__(self,user):
        self.user = user
        self.points = 0
        self.jouer = 0

    def getUser(self):
        return self.user.name
    
    def getPoints(self):
        return self.points

    def setPointsToUser(self, pt):
        self.points += pt

    def rmPointsToUser(self):
        test = self.points - 1
        if test < 0:
            self.points = 0
        else:
            self.points = test
        return test

    def setJouer(self):
        self.jouer += 1

    def restartJouer(self):
        self.jouer = 0

    def getJouer(self):
        return self.jouer
    

class Classement:

    def __init__(self):
        self.tabJoueursObjet = [] #Tableau de "Joueur"
        self.tabClassement = []

    def ajouterJoueurs(self, joueur):
        self.tabJoueursObjet.append(joueur)

    def getTabJoueursObjet(self):
        return self.tabJoueursObjet

    def resetClassement(self):
        self.tabClassement = []

    def ajoutMaxAListe(self, liste):
        if len(liste) < 1:
            return None
        else:
            max = 0
            tab = []

            for i in range(len(self.tabJoueursObjet)):
                tab.append(self.tabJoueursObjet[i])

            joueurMax = Joueur
            for i in liste:
                if max < i.getPoints():
                    max = i.getPoints()
                    joueurMax = i
            tab.remove(joueurMax)
            print(joueurMax.getUser())
            self.tabClassement.append(joueurMax)
            return tab

    def getTabClassement(self):
        return self.tabClassement

    def getPlaceJoueurClassementEtPoints(self, joueur):
        j = 0
        for i in self.tabClassement:
            j+=1
            if i.getUser() == joueur:
                return j, i.getPoints()
        return 0,0


'''
@bot.command()
async def combat(ctx, mec, mec2):
    attaque = ["Foudre", "Feu", "Attaque standard", "Kamikaze", "bouclier"]
    d√©g√¢t = [50, 20, 10, 0, 0]
    mecvie = 100
    mec2vie = 100
    persos = [mec, mec2]
    rdm = random.randint(0,1)
    savebouclier = False
    while mecvie > 0 or mec2vie > 0:
        if mecvie <= 0:
            await ctx.send(f"{mec2} gagne !")
            break
        elif mec2vie <= 0:
            await ctx.send(f"{mec} gagne !")
            break
        a = persos[rdm]
        await ctx.send(f"C'est au tour de {a} de jouer !")
        await asyncio.sleep(1)
        if a == mec:
            rdm = random.randint(0,3)
            attack = attaque[rdm]
            if attack == "bouclier":
                await ctx.send(f"{a} utilise bouclier !")
                await asyncio.sleep(1)
                savebouclier = True
                k = 1
            elif attack == "Kamikaze":
                await ctx.send(f"{a} attaque avec Kamikaze !...")
                await ctx.send(f"Ah bah vous √™tes tous mort")
                break
            else:
                mec2vie = mec2vie - d√©g√¢t[rdm]
                await ctx.send(f"{a} attaque avec {attack} ! {mec2} perd {d√©g√¢t[rdm]}pv !")
                await asyncio.sleep(1)
                k = 1
        elif a == mec2:
            rdm = random.randint(0,3)
            attack = attaque[rdm]
            if attack == "bouclier":
                await ctx.send(f"{a} utilise bouclier !")
                await asyncio.sleep(1)
                k = 0
            elif attack == "Kamikaze":
                await ctx.send(f"{a} attaque avec Kamikaze !...")
                await ctx.send(f"Ah bah vous √™tes tous mort")
                break
            else:
                mecvie = mecvie - d√©g√¢t[rdm]
                await ctx.send(f"{a} attaque avec {attack} ! {mec} perd {d√©g√¢t[rdm]}pv !")
                await asyncio.sleep(1)
                k = 0
        #####################################################Prochain Tour
        b = persos[k]     
        await ctx.send(f"C'est au tour de {b} de jouer !")
        if b == mec:
            rdm = random.randint(0,3)
            attack = attaque[rdm]
            if attack == "bouclier":
                await ctx.send(f"{b} utilise bouclier !")
                await asyncio.sleep(1)
                savebouclier = True
            elif savebouclier == True:
                await ctx.send(f"L'adversaire ayant utilis√© un bouclier, {b} ne peut pas attaquer !")
                await asyncio.sleep(1)
                savebouclier = False
            elif attack == "Kamikaze":
                await ctx.send(f"{b} attaque avec Kamikaze !...")
                await ctx.send(f"Ah bah vous √™tes tous mort")
                break
            else:
                mec2vie = mec2vie - d√©g√¢t[rdm]
                await ctx.send(f"{b} attaque avec {attack} ! {mec2} perd {d√©g√¢t[rdm]}pv !")
                await asyncio.sleep(1)
        elif b == mec2:
            rdm = random.randint(0,3)
            attack = attaque[rdm]
            if attack == "bouclier":
                await ctx.send(f"{b} utilise bouclier !")
                await asyncio.sleep(1)
                savebouclier = True
            elif savebouclier == True:
                await ctx.send(f"L'adversaire ayant utilis√© un bouclier, {b} ne peut pas attaquer !")
                await asyncio.sleep(1)
                savebouclier = False
            elif attack == "Kamikaze":
                await ctx.send(f"{b} attaque avec Kamikaze !...")                
                await ctx.send(f"Ah bah vous √™tes tous mort")
                break
            else:
                mec2vie = mec2vie - d√©g√¢t[rdm]
                await ctx.send(f"{b} attaque avec {attack} ! {mec} perd {d√©g√¢t[rdm]}pv !")
                await asyncio.sleep(1)
'''